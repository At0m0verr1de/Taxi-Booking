/* Insertion of driver record */
INSERT INTO Driver (type_id, name, email, phone_number, license_plate) 
VALUES (1, 'John Doe', 'john@example.com', '1234567890', 'ABC1234');

/*Insertion of the User record */
INSERT INTO User (name, email, phone_number, password) 
VALUES ('Jane Doe', 'jane@example.com', '0987654321', 'password123');


/* Insertion of a cab */
INSERT INTO Car (type_id, driver_id) 
VALUES (1, 1);


/* Updating the status of a cab */
UPDATE Driver SET status = 'booked' WHERE driver_id = 1;


/* Updating User Records */
UPDATE User SET phone_number = '1111111111' WHERE user_id = 1;
UPDATE User SET email = 'newemail@example.com' WHERE user_id = 1;


/* Associating driver with a cab (and its type, cab no.) */
UPDATE Car SET type_id = 2, driver_id = 2 WHERE car_id = 1;


/* Cancel ride feature by deleting an entry from bookings table */
DELETE FROM Rides WHERE ride_id = 1;


/* Generating Feedback and Billing */
SELECT Rides.ride_id, User.name AS customer_name, Driver.name AS driver_name, Car_Type_Price.price, Rides.rating, Rides.description 
FROM Rides 
JOIN Car ON Rides.car_id = Car.car_id 
JOIN Driver ON Car.driver_id = Driver.driver_id 
JOIN Car_Type_Price ON Car.type_id = Car_Type_Price.type_id 
JOIN Ride_Payment ON Rides.ride_id = Ride_Payment.ride_id 
JOIN User ON Ride_Payment.user_id = User.user_id 
WHERE Rides.ride_id = 2;



/* Creating a trigger of adding surge charge on bill amount */
CREATE TRIGGER add_surge_charge 
BEFORE INSERT ON Car_Type_Price 
FOR EACH ROW 
BEGIN
  SET NEW.price = NEW.price * 1.2;
END;




/* Procedure to get all available cabs of a certain category */
CREATE PROCEDURE get_available_cabs (IN category INT)
BEGIN
  SELECT Car.car_id, Car_Type.passengers_capacity, Driver.name AS driver_name, Driver.phone_number, Driver.license_plate 
  FROM Car 
  JOIN Driver ON Car.driver_id = Driver.driver_id 
  JOIN Car_Type ON Car.type_id = Car_Type.type_id 
  WHERE Driver.status = 'available' AND Car_Type.type_id = category;
END;



/* Funtion to Total amount generated by specific driver */
CREATE FUNCTION get_total_amount_by_driver (driver_id INT) RETURNS INT
BEGIN
  DECLARE total_amount INT;
  SELECT SUM(Car_Type_Price.price) INTO total_amount
  FROM Rides 
  JOIN Car ON Rides.car_id = Car.car_id 
  JOIN Driver ON Car.driver_id = Driver.driver_id 
  JOIN Car_Type_Price ON Car.type_id = Car_Type_Price.type_id 
  WHERE Driver.driver_id = driver_id;
  RETURN total_amount;
END;


/* Function to get total amount generated by a specific category of cabs */
CREATE FUNCTION get_total_amount_by_category(category INT)
RETURNS INT
BEGIN
    DECLARE total_amount INT;
    
    SELECT SUM(total_amount)
    INTO total_amount
    FROM Rides r
    JOIN Car c ON r.car_id = c.car_id
    JOIN Car_Type t ON c.type_id = t.type_id
    WHERE t.type_id = category;
    RETURN total_amount;
END;


/* Procedure to get all customers */
CREATE PROCEDURE get_all_customers()
BEGIN
    SELECT *
    FROM User;
END;


/* Procedure to get all drivers join with their cab */
CREATE PROCEDURE get_all_drivers()
BEGIN
    SELECT Driver.name, Driver.email, Driver.phone_number, Driver.license_plate, Car_Type.price, Car_Type.passengers
    FROM Driver
    INNER JOIN Car ON Driver.driver_id = Car.driver_id
    INNER JOIN Car_Type ON Car.type_id = Car_Type.type_id;
END;
