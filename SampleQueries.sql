/* Insertion of driver record */
INSERT INTO Driver (type_id, name, email, phone_number, license_plate, status)
VALUES (1, 'John Doe', 'johndoe@email.com', '+1234567890', 'ABC123', 'available');


/*Insertion of the User record */
INSERT INTO User (name, email, phone_number)
VALUES ('Jane Doe', 'janedoe@email.com', '+9876543210');


/* Insertion of a cab */
INSERT INTO Car (type_id, driver_id)
VALUES (1, 1);


/* Updating the status of a cab */
UPDATE Driver SET status = 'booked' WHERE driver_id = 1;


/* Updating User Records */
UPDATE User SET phone_number = '+1234567890', email = 'janedoe_newemail@email.com' WHERE user_id = 1;


/* Associating driver with a cab (and its type, cab no.) */
UPDATE Car SET type_id = 2, driver_id = 2 WHERE car_id = 1;


/* Cancel ride feature by deleting an entry from bookings table */
DELETE FROM Rides WHERE ride_id = 1;


/* Generating Feedback and Billing */
SELECT ride_id, rating, description, payment_id, Car_Type.price
FROM Rides
JOIN Car ON Rides.car_id = Car.car_id
JOIN Car_Type ON Car.type_id = Car_Type.type_id
WHERE ride_id = 1;



/* Creating a trigger of adding surge charge on bill amount */
CREATE TRIGGER add_surge_charge 
BEFORE UPDATE ON Rides
FOR EACH ROW
BEGIN
    DECLARE surge_charge DECIMAL(10,2);
    IF (NEW.booking_time BETWEEN '2023-04-11 12:00:00' AND '2023-04-11 18:00:00') THEN
        SET surge_charge = Car_Type.price * 0.2;
    ELSEIF (NEW.booking_time BETWEEN '2023-04-11 18:00:00' AND '2023-04-12 00:00:00') THEN
        SET surge_charge = Car_Type.price * 0.4;
    ELSE
        SET surge_charge = 0;
    END IF;
    SET NEW.total_amount = Car_Type.price + surge_charge;
END;



/* Procedure to get all available cabs of a certain category */
CREATE PROCEDURE get_available_cabs(category INT)
BEGIN
    SELECT c.*
    FROM Car c
    JOIN Car_Type t ON c.type_id = t.type_id
    LEFT JOIN Driver d ON c.driver_id = d.driver_id
    WHERE t.type_id = category
    AND (d.status IS NULL OR d.status = 'available');
END;



/* Funtion to Total amount generated by specific driver */
CREATE FUNCTION get_total_amount_by_driver(driver_id INT)
RETURNS INT
BEGIN
    DECLARE total_amount INT;
    
    SELECT SUM(total_amount)
    INTO total_amount
    FROM Rides r
    JOIN Car c ON r.car_id = c.car_id
    WHERE c.driver_id = driver_id;
    
    RETURN total_amount;
END;



/* Function to get total amount generated by a specific category of cabs */
CREATE FUNCTION get_total_amount_by_category(category INT)
RETURNS INT
BEGIN
    DECLARE total_amount INT;
    
    SELECT SUM(total_amount)
    INTO total_amount
    FROM Rides r
    JOIN Car c ON r.car_id = c.car_id
    JOIN Car_Type t ON c.type_id = t.type_id
    WHERE t.type_id = category;
    
    RETURN total_amount;
END;



/* Procedure to get all customers */
CREATE PROCEDURE get_all_customers()
BEGIN
    SELECT *
    FROM User;
END;



/* Procedure to get all drivers join with their cab */
CREATE PROCEDURE get_all_drivers()
BEGIN
    SELECT Driver.name, Driver.email, Driver.phone_number, Driver.license_plate, Car_Type.price, Car_Type.passengers
    FROM Driver
    INNER JOIN Car ON Driver.driver_id = Car.driver_id
    INNER JOIN Car_Type ON Car.type_id = Car_Type.type_id;
END;
